//
//  CalendarPickerVC.swift
//  Travelisto
//
//  Created by Chidi Emeh on 4/17/18.
//  Copyright Â© 2018 Chidi Emeh. All rights reserved.
//

import UIKit
import JTAppleCalendar

class CalendarPickerVC: UIViewController{
    
    let formatter = DateFormatter()
    let testCalendar = Calendar(identifier: Calendar.Identifier.gregorian)

    @IBOutlet weak var jtCollectionView: JTAppleCalendarView!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        jtCollectionView.calendarDelegate = self
        jtCollectionView.calendarDataSource = self
        setupCell()
    }
    


    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    
    @IBAction func cancelButtonTapped(_ sender: UIButton) {
        self.presentingViewController?.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func doneButtonTapped(_ sender: UIButton) {
        self.presentingViewController?.dismiss(animated: true, completion: nil)
    }
    

}


//MARK: - JTCalendar Delegate and Datasource
extension CalendarPickerVC: JTAppleCalendarViewDelegate, JTAppleCalendarViewDataSource  {

    func setupCell(){
        jtCollectionView.minimumLineSpacing = 0
        jtCollectionView.minimumInteritemSpacing = 0
    }
    
    func configureCalendar(_ calendar: JTAppleCalendarView) -> ConfigurationParameters {
        
        formatter.dateFormat = "yyy MM dd"
        formatter.timeZone = Calendar.current.timeZone
        formatter.locale = Calendar.current.locale
        
        //StartDate : Should be generated by a method or class to spit
        //out todays date + a month back
        //EndDate : A Year from start date can be generated or refreshed
        //while the collectionView scrolls to a year ahead
        let startDate = formatter.date(from: "2018 01 01")!
        let endDate = formatter.date(from: "2018 12 31")!
        
        let parameters = ConfigurationParameters(startDate: startDate, endDate: endDate)
        
        return parameters
        
    }
    
    //Helper Function for willDisplay and CellForRow
    func sharedFunctionToConfigureCell(myCustomCell: CalendarPickerCVCell, cellState: CellState, date: Date) {
        myCustomCell.dateLabel.text = "\(cellState.text)"
        if (testCalendar.isDateInToday(date)) {
            myCustomCell.backgroundColor = UIColor.red
        } else {
            myCustomCell.backgroundColor = UIColor.white
        }
    }
    
    
    // Function to handle the text color of the calendar
    func handleCellTextColor(view: JTAppleCell?, cellState: CellState) {
        guard let myCustomCell = view as? CalendarPickerCVCell  else {
            return
        }
        
        if cellState.isSelected {
            myCustomCell.dateLabel.textColor = .white
        } else {
            if cellState.dateBelongsTo == .thisMonth {
                myCustomCell.dateLabel.textColor = .black
            } else {
                myCustomCell.dateLabel.textColor = .gray
            }
        }
    }
    
    
    //Handle Text Selection
    func handleCellSelected(view: JTAppleCell?, cellState: CellState){
        guard let cell = view as? CalendarPickerCVCell else { return }
        if cell.isSelected {
            cell.selectedView.isHidden = false
            cell.dateLabel.textColor = UIColor.white
        }else {
            cell.selectedView.isHidden = true
            cell.dateLabel.textColor = UIColor.black
        }
    }

    func calendar(_ calendar: JTAppleCalendarView, willDisplay cell: JTAppleCell, forItemAt date: Date, cellState: CellState, indexPath: IndexPath) {
        let myCustomCell = cell as! CalendarPickerCVCell
        sharedFunctionToConfigureCell(myCustomCell: myCustomCell, cellState: cellState, date: date)
        handleCellTextColor(view: cell, cellState: cellState)
    
    }
    
    func calendar(_ calendar: JTAppleCalendarView, cellForItemAt date: Date, cellState: CellState, indexPath: IndexPath) -> JTAppleCell {
        let cell = calendar.dequeueReusableJTAppleCell(withReuseIdentifier: SearchCells.calendarPickerCVCell.rawValue, for: indexPath) as! CalendarPickerCVCell
        sharedFunctionToConfigureCell(myCustomCell: cell, cellState: cellState, date: date)
        handleCellTextColor(view: cell, cellState: cellState)
        
        if cellState.isSelected {
            cell.selectedView.isHidden = false
        }else {
            cell.selectedView.isHidden = true
        }
        
        return cell
    }
    
}




//MARK: - DidSelect item
extension CalendarPickerVC {
    
    func calendar(_ calendar: JTAppleCalendarView, didSelectDate date: Date, cell: JTAppleCell?, cellState: CellState) {
        guard let cell = cell as? CalendarPickerCVCell else { return }
        cell.selectedView.isHidden = false
        handleCellSelected(view: cell, cellState: cellState)
        handleCellTextColor(view: cell, cellState: cellState)
        
        
    }
    
    func calendar(_ calendar: JTAppleCalendarView, didDeselectDate date: Date, cell: JTAppleCell?, cellState: CellState) {
        guard let cell = cell as? CalendarPickerCVCell else { return }
        handleCellSelected(view: cell, cellState: cellState)
        handleCellTextColor(view: cell, cellState: cellState)
        
    }
    
    
    
}





















